bool isKthBitSet(int n, int k)
{
    if (n & (1 << (k - 1))) return true;
    return false;
}
long long binpow(long long a, long long b, long long m) {
    a %= m;
    long long res = 1;
    while (b > 0) {
        if (b & 1)
            res = res * a % m;
        a = a * a % m;
        b >>= 1;
    }
    return res;
}
/**********************Disjoint Set Union********************/
int *parent, *rank_arr;
void initialize(int n) {
    parent = new int[n];
    rank_arr = new int[n];
    for(int i=0; i<n; i++) {
        parent[i]=i;
        rank_arr[i]=0;
    }
}
int find(int x) {
    if(parent[x]==x) return x;
    return parent[x] = find(parent[x]);
}
void merge(int x, int y) {
    int xp = find(x), yp = find(y);
    if(rank_arr[xp]<rank_arr[yp]) {
        parent[xp] = yp;
    } else if(rank_arr[xp]>rank_arr[yp]) parent[yp] = xp;
    else {
        parent[yp]=xp;
        rank_arr[xp]++;
    }
}